//go:build gofreedb_test

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/FreeLeh/GoFreeDB/internal/lark (interfaces: sheetsWrapper)
//
// Generated by this command:
//
//	mockgen -destination=models_mock.go -package=lark -build_constraint=gofreedb_test . sheetsWrapper
//

// Package lark is a generated GoMock package.
package lark

import (
	context "context"
	reflect "reflect"

	models "github.com/FreeLeh/GoFreeDB/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MocksheetsWrapper is a mock of sheetsWrapper interface.
type MocksheetsWrapper struct {
	ctrl     *gomock.Controller
	recorder *MocksheetsWrapperMockRecorder
	isgomock struct{}
}

// MocksheetsWrapperMockRecorder is the mock recorder for MocksheetsWrapper.
type MocksheetsWrapperMockRecorder struct {
	mock *MocksheetsWrapper
}

// NewMocksheetsWrapper creates a new mock instance.
func NewMocksheetsWrapper(ctrl *gomock.Controller) *MocksheetsWrapper {
	mock := &MocksheetsWrapper{ctrl: ctrl}
	mock.recorder = &MocksheetsWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksheetsWrapper) EXPECT() *MocksheetsWrapperMockRecorder {
	return m.recorder
}

// BatchUpdateRows mocks base method.
func (m *MocksheetsWrapper) BatchUpdateRows(ctx context.Context, spreadsheetToken string, requests []BatchUpdateRowsRequest) ([]BatchUpdateRowsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateRows", ctx, spreadsheetToken, requests)
	ret0, _ := ret[0].([]BatchUpdateRowsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateRows indicates an expected call of BatchUpdateRows.
func (mr *MocksheetsWrapperMockRecorder) BatchUpdateRows(ctx, spreadsheetToken, requests any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateRows", reflect.TypeOf((*MocksheetsWrapper)(nil).BatchUpdateRows), ctx, spreadsheetToken, requests)
}

// Clear mocks base method.
func (m *MocksheetsWrapper) Clear(ctx context.Context, spreadsheetToken string, ranges []models.A1Range) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", ctx, spreadsheetToken, ranges)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MocksheetsWrapperMockRecorder) Clear(ctx, spreadsheetToken, ranges any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MocksheetsWrapper)(nil).Clear), ctx, spreadsheetToken, ranges)
}

// CreateSheet mocks base method.
func (m *MocksheetsWrapper) CreateSheet(ctx context.Context, spreadsheetToken, sheetName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSheet", ctx, spreadsheetToken, sheetName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSheet indicates an expected call of CreateSheet.
func (mr *MocksheetsWrapperMockRecorder) CreateSheet(ctx, spreadsheetToken, sheetName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSheet", reflect.TypeOf((*MocksheetsWrapper)(nil).CreateSheet), ctx, spreadsheetToken, sheetName)
}

// DeleteSheets mocks base method.
func (m *MocksheetsWrapper) DeleteSheets(ctx context.Context, spreadsheetToken string, sheetIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSheets", ctx, spreadsheetToken, sheetIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSheets indicates an expected call of DeleteSheets.
func (mr *MocksheetsWrapperMockRecorder) DeleteSheets(ctx, spreadsheetToken, sheetIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSheets", reflect.TypeOf((*MocksheetsWrapper)(nil).DeleteSheets), ctx, spreadsheetToken, sheetIDs)
}

// GetSheets mocks base method.
func (m *MocksheetsWrapper) GetSheets(ctx context.Context, spreadsheetToken string) (GetSheetsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSheets", ctx, spreadsheetToken)
	ret0, _ := ret[0].(GetSheetsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSheets indicates an expected call of GetSheets.
func (mr *MocksheetsWrapperMockRecorder) GetSheets(ctx, spreadsheetToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSheets", reflect.TypeOf((*MocksheetsWrapper)(nil).GetSheets), ctx, spreadsheetToken)
}

// OverwriteRows mocks base method.
func (m *MocksheetsWrapper) OverwriteRows(ctx context.Context, spreadsheetToken string, a1Range models.A1Range, values [][]any) (InsertRowsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OverwriteRows", ctx, spreadsheetToken, a1Range, values)
	ret0, _ := ret[0].(InsertRowsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OverwriteRows indicates an expected call of OverwriteRows.
func (mr *MocksheetsWrapperMockRecorder) OverwriteRows(ctx, spreadsheetToken, a1Range, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverwriteRows", reflect.TypeOf((*MocksheetsWrapper)(nil).OverwriteRows), ctx, spreadsheetToken, a1Range, values)
}

// QueryRows mocks base method.
func (m *MocksheetsWrapper) QueryRows(ctx context.Context, spreadsheetToken, sheetName string, a1Range models.A1Range, query string) (QueryRowsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRows", ctx, spreadsheetToken, sheetName, a1Range, query)
	ret0, _ := ret[0].(QueryRowsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRows indicates an expected call of QueryRows.
func (mr *MocksheetsWrapperMockRecorder) QueryRows(ctx, spreadsheetToken, sheetName, a1Range, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRows", reflect.TypeOf((*MocksheetsWrapper)(nil).QueryRows), ctx, spreadsheetToken, sheetName, a1Range, query)
}
